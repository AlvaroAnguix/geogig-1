// automatically generated by the FlatBuffers compiler, do not modify

package org.locationtech.geogig.flatbuffers.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class LeafTree extends Table {
  public static LeafTree getRootAsLeafTree(ByteBuffer _bb) { return getRootAsLeafTree(_bb, new LeafTree()); }
  public static LeafTree getRootAsLeafTree(ByteBuffer _bb, LeafTree obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public LeafTree __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long size() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int numDirectTreeNodes() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String nodesNames(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int nodesNamesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public SHA nodesIds(int j) { return nodesIds(new SHA(), j); }
  public SHA nodesIds(SHA obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o) + j * 24, bb) : null; }
  public int nodesIdsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public SHA nodesMetadataIds(int j) { return nodesMetadataIds(new SHA(), j); }
  public SHA nodesMetadataIds(SHA obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o) + j * 24, bb) : null; }
  public int nodesMetadataIdsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public org.locationtech.geogig.flatbuffers.generated.values.Bounds nodesBounds(int j) { return nodesBounds(new org.locationtech.geogig.flatbuffers.generated.values.Bounds(), j); }
  public org.locationtech.geogig.flatbuffers.generated.values.Bounds nodesBounds(org.locationtech.geogig.flatbuffers.generated.values.Bounds obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o) + j * 16, bb) : null; }
  public int nodesBoundsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public org.locationtech.geogig.flatbuffers.generated.values.Dictionary nodesExtraData(int j) { return nodesExtraData(new org.locationtech.geogig.flatbuffers.generated.values.Dictionary(), j); }
  public org.locationtech.geogig.flatbuffers.generated.values.Dictionary nodesExtraData(org.locationtech.geogig.flatbuffers.generated.values.Dictionary obj, int j) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int nodesExtraDataLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }

  public static int createLeafTree(FlatBufferBuilder builder,
      long size,
      int num_direct_tree_nodes,
      int nodes_namesOffset,
      int nodes_idsOffset,
      int nodes_metadata_idsOffset,
      int nodes_boundsOffset,
      int nodes_extra_dataOffset) {
    builder.startObject(7);
    LeafTree.addSize(builder, size);
    LeafTree.addNodesExtraData(builder, nodes_extra_dataOffset);
    LeafTree.addNodesBounds(builder, nodes_boundsOffset);
    LeafTree.addNodesMetadataIds(builder, nodes_metadata_idsOffset);
    LeafTree.addNodesIds(builder, nodes_idsOffset);
    LeafTree.addNodesNames(builder, nodes_namesOffset);
    LeafTree.addNumDirectTreeNodes(builder, num_direct_tree_nodes);
    return LeafTree.endLeafTree(builder);
  }

  public static void startLeafTree(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addSize(FlatBufferBuilder builder, long size) { builder.addLong(0, size, 0L); }
  public static void addNumDirectTreeNodes(FlatBufferBuilder builder, int numDirectTreeNodes) { builder.addInt(1, numDirectTreeNodes, 0); }
  public static void addNodesNames(FlatBufferBuilder builder, int nodesNamesOffset) { builder.addOffset(2, nodesNamesOffset, 0); }
  public static int createNodesNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNodesNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNodesIds(FlatBufferBuilder builder, int nodesIdsOffset) { builder.addOffset(3, nodesIdsOffset, 0); }
  public static void startNodesIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(24, numElems, 8); }
  public static void addNodesMetadataIds(FlatBufferBuilder builder, int nodesMetadataIdsOffset) { builder.addOffset(4, nodesMetadataIdsOffset, 0); }
  public static void startNodesMetadataIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(24, numElems, 8); }
  public static void addNodesBounds(FlatBufferBuilder builder, int nodesBoundsOffset) { builder.addOffset(5, nodesBoundsOffset, 0); }
  public static void startNodesBoundsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(16, numElems, 4); }
  public static void addNodesExtraData(FlatBufferBuilder builder, int nodesExtraDataOffset) { builder.addOffset(6, nodesExtraDataOffset, 0); }
  public static int createNodesExtraDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNodesExtraDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endLeafTree(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}


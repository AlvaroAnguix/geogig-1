// automatically generated by the FlatBuffers compiler, do not modify

package org.locationtech.geogig.flatbuffers.generated.values;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

@SuppressWarnings("unused")
public final class DOUBLE_ARRAY extends Table {
  public static DOUBLE_ARRAY getRootAsDOUBLE_ARRAY(ByteBuffer _bb) { return getRootAsDOUBLE_ARRAY(_bb, new DOUBLE_ARRAY()); }
  public static DOUBLE_ARRAY getRootAsDOUBLE_ARRAY(ByteBuffer _bb, DOUBLE_ARRAY obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public DOUBLE_ARRAY __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double value(int j) { int o = __offset(4); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int valueLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer valueAsByteBuffer() { return __vector_as_bytebuffer(4, 8); }
  public ByteBuffer valueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 8); }

  public static int createDOUBLE_ARRAY(FlatBufferBuilder builder,
      int valueOffset) {
    builder.startObject(1);
    DOUBLE_ARRAY.addValue(builder, valueOffset);
    return DOUBLE_ARRAY.endDOUBLE_ARRAY(builder);
  }

  public static void startDOUBLE_ARRAY(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addValue(FlatBufferBuilder builder, int valueOffset) { builder.addOffset(0, valueOffset, 0); }
  public static int createValueVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startValueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endDOUBLE_ARRAY(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}


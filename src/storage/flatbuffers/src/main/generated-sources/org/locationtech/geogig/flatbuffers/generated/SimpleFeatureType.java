// automatically generated by the FlatBuffers compiler, do not modify

package org.locationtech.geogig.flatbuffers.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SimpleFeatureType extends Table {
  public static SimpleFeatureType getRootAsSimpleFeatureType(ByteBuffer _bb) { return getRootAsSimpleFeatureType(_bb, new SimpleFeatureType()); }
  public static SimpleFeatureType getRootAsSimpleFeatureType(ByteBuffer _bb, SimpleFeatureType obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public SimpleFeatureType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public QualifiedName name() { return name(new QualifiedName()); }
  public QualifiedName name(QualifiedName obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String defaultGeometryName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer defaultGeometryNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer defaultGeometryNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public SimpleAttributeDescriptor attributes(int j) { return attributes(new SimpleAttributeDescriptor(), j); }
  public SimpleAttributeDescriptor attributes(SimpleAttributeDescriptor obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int attributesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createSimpleFeatureType(FlatBufferBuilder builder,
      int nameOffset,
      int defaultGeometryNameOffset,
      int attributesOffset) {
    builder.startObject(3);
    SimpleFeatureType.addAttributes(builder, attributesOffset);
    SimpleFeatureType.addDefaultGeometryName(builder, defaultGeometryNameOffset);
    SimpleFeatureType.addName(builder, nameOffset);
    return SimpleFeatureType.endSimpleFeatureType(builder);
  }

  public static void startSimpleFeatureType(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addDefaultGeometryName(FlatBufferBuilder builder, int defaultGeometryNameOffset) { builder.addOffset(1, defaultGeometryNameOffset, 0); }
  public static void addAttributes(FlatBufferBuilder builder, int attributesOffset) { builder.addOffset(2, attributesOffset, 0); }
  public static int createAttributesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAttributesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSimpleFeatureType(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // name
    return o;
  }
}


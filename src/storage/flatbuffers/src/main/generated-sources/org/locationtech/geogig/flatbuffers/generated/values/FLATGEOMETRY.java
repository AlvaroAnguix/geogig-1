// automatically generated by the FlatBuffers compiler, do not modify

package org.locationtech.geogig.flatbuffers.generated.values;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FLATGEOMETRY extends Table {
  public static FLATGEOMETRY getRootAsFLATGEOMETRY(ByteBuffer _bb) { return getRootAsFLATGEOMETRY(_bb, new FLATGEOMETRY()); }
  public static FLATGEOMETRY getRootAsFLATGEOMETRY(ByteBuffer _bb, FLATGEOMETRY obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FLATGEOMETRY __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int dimension() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public byte type() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public double ordinates(int j) { int o = __offset(8); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int ordinatesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer ordinatesAsByteBuffer() { return __vector_as_bytebuffer(8, 8); }
  public ByteBuffer ordinatesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 8); }

  public static int createFLATGEOMETRY(FlatBufferBuilder builder,
      int dimension,
      byte type,
      int ordinatesOffset) {
    builder.startObject(3);
    FLATGEOMETRY.addOrdinates(builder, ordinatesOffset);
    FLATGEOMETRY.addType(builder, type);
    FLATGEOMETRY.addDimension(builder, dimension);
    return FLATGEOMETRY.endFLATGEOMETRY(builder);
  }

  public static void startFLATGEOMETRY(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addDimension(FlatBufferBuilder builder, int dimension) { builder.addByte(0, (byte)dimension, (byte)0); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(1, type, 0); }
  public static void addOrdinates(FlatBufferBuilder builder, int ordinatesOffset) { builder.addOffset(2, ordinatesOffset, 0); }
  public static int createOrdinatesVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startOrdinatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endFLATGEOMETRY(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}


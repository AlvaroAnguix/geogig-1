// automatically generated by the FlatBuffers compiler, do not modify

package org.locationtech.geogig.flatbuffers.generated.v1.values;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TIMESTAMP extends Table {
  public static TIMESTAMP getRootAsTIMESTAMP(ByteBuffer _bb) { return getRootAsTIMESTAMP(_bb, new TIMESTAMP()); }
  public static TIMESTAMP getRootAsTIMESTAMP(ByteBuffer _bb, TIMESTAMP obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public TIMESTAMP __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long millis() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int nanos() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createTIMESTAMP(FlatBufferBuilder builder,
      long millis,
      int nanos) {
    builder.startObject(2);
    TIMESTAMP.addMillis(builder, millis);
    TIMESTAMP.addNanos(builder, nanos);
    return TIMESTAMP.endTIMESTAMP(builder);
  }

  public static void startTIMESTAMP(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addMillis(FlatBufferBuilder builder, long millis) { builder.addLong(0, millis, 0L); }
  public static void addNanos(FlatBufferBuilder builder, int nanos) { builder.addInt(1, nanos, 0); }
  public static int endTIMESTAMP(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}


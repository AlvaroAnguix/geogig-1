syntax = "proto3";
option java_multiple_files = true;
option java_package = "org.locationtech.geogig.grpc.storage";
option java_outer_classname = "ObjectStoreRPC";

package grpc;

import "Lang.proto";
import "model/ObjectId.proto";
import "model/RevObject.proto";
import "storage/ObjectInfo.proto";
import "google/protobuf/wrappers.proto";

message BatchResult{
    enum Status{
        INSERTED = 0;
        FOUND = 1;
        DELETED = 2;
        NOT_FOUND = 3;
    }
    ObjectId id = 1;
    Status status = 2;
}

service ObjectStore{

    //boolean exists(ObjectId id);
    rpc exists(ObjectId) returns (google.protobuf.BoolValue);

    //List<ObjectId> lookUp(String partialId);
    rpc lookUp(google.protobuf.StringValue) returns (stream ObjectId);
    
    //boolean put(RevObject object);
    //void putAll(Iterator<? extends RevObject> objects);
    //void putAll(Iterator<? extends RevObject> objects, BulkOpListener listener);
    rpc put(stream RevObject) returns(stream BatchResult);
    
    //RevObject get(ObjectId id) throws IllegalArgumentException;
    //<T extends RevObject> T get(ObjectId id, Class<T> type) throws IllegalArgumentException;
    //@Nullable RevObject getIfPresent(ObjectId id);
    //@Nullable <T extends RevObject> T getIfPresent(ObjectId id, Class<T> type)
    //RevTree getTree(ObjectId id);
    //RevFeature getFeature(ObjectId id);
    //RevFeatureType getFeatureType(ObjectId id);
    //RevCommit getCommit(ObjectId id);
    //RevTag getTag(ObjectId id);
    //Iterator<RevObject> getAll(Iterable<ObjectId> ids);
    //Iterator<RevObject> getAll(Iterable<ObjectId> ids, BulkOpListener listener);
    //<T extends RevObject> Iterator<T> getAll(Iterable<ObjectId> ids, BulkOpListener listener, Class<T> type);
    rpc get(stream ObjectId) returns(stream RevObject);

    //void delete(ObjectId objectId);
    //void deleteAll(Iterator<ObjectId> ids);
    //void deleteAll(Iterator<ObjectId> ids, BulkOpListener listener);
    rpc delete(stream ObjectId) returns (stream BatchResult);
    
    //<T extends RevObject> AutoCloseableIterator<ObjectInfo<T>> getObjects(
    //                         Iterator<NodeRef> nodes, BulkOpListener listener, Class<T> type);
    rpc getObjects(stream ObjectInfo) returns (stream ObjectInfo);
}

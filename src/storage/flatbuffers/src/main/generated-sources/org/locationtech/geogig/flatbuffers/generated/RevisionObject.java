// automatically generated by the FlatBuffers compiler, do not modify

package org.locationtech.geogig.flatbuffers.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RevisionObject extends Table {
  public static RevisionObject getRootAsRevisionObject(ByteBuffer _bb) { return getRootAsRevisionObject(_bb, new RevisionObject()); }
  public static RevisionObject getRootAsRevisionObject(ByteBuffer _bb, RevisionObject obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public RevisionObject __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte objectType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Commit commit() { return commit(new Commit()); }
  public Commit commit(Commit obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public LeafTree leafTree() { return leafTree(new LeafTree()); }
  public LeafTree leafTree(LeafTree obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public NodeTree nodeTree() { return nodeTree(new NodeTree()); }
  public NodeTree nodeTree(NodeTree obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Feature feature() { return feature(new Feature()); }
  public Feature feature(Feature obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Tag tag() { return tag(new Tag()); }
  public Tag tag(Tag obj) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public SimpleFeatureType simpleFeatureType() { return simpleFeatureType(new SimpleFeatureType()); }
  public SimpleFeatureType simpleFeatureType(SimpleFeatureType obj) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createRevisionObject(FlatBufferBuilder builder,
      byte object_type,
      int commitOffset,
      int leaf_treeOffset,
      int node_treeOffset,
      int featureOffset,
      int tagOffset,
      int simple_feature_typeOffset) {
    builder.startObject(7);
    RevisionObject.addSimpleFeatureType(builder, simple_feature_typeOffset);
    RevisionObject.addTag(builder, tagOffset);
    RevisionObject.addFeature(builder, featureOffset);
    RevisionObject.addNodeTree(builder, node_treeOffset);
    RevisionObject.addLeafTree(builder, leaf_treeOffset);
    RevisionObject.addCommit(builder, commitOffset);
    RevisionObject.addObjectType(builder, object_type);
    return RevisionObject.endRevisionObject(builder);
  }

  public static void startRevisionObject(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addObjectType(FlatBufferBuilder builder, byte objectType) { builder.addByte(0, objectType, 0); }
  public static void addCommit(FlatBufferBuilder builder, int commitOffset) { builder.addOffset(1, commitOffset, 0); }
  public static void addLeafTree(FlatBufferBuilder builder, int leafTreeOffset) { builder.addOffset(2, leafTreeOffset, 0); }
  public static void addNodeTree(FlatBufferBuilder builder, int nodeTreeOffset) { builder.addOffset(3, nodeTreeOffset, 0); }
  public static void addFeature(FlatBufferBuilder builder, int featureOffset) { builder.addOffset(4, featureOffset, 0); }
  public static void addTag(FlatBufferBuilder builder, int tagOffset) { builder.addOffset(5, tagOffset, 0); }
  public static void addSimpleFeatureType(FlatBufferBuilder builder, int simpleFeatureTypeOffset) { builder.addOffset(6, simpleFeatureTypeOffset, 0); }
  public static int endRevisionObject(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishRevisionObjectBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedRevisionObjectBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}


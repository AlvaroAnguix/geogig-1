// automatically generated by the FlatBuffers compiler, do not modify

package org.locationtech.geogig.flatbuffers.generated.v1;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

@SuppressWarnings("unused")
public final class SimpleAttributeDescriptor extends Table {
  public static SimpleAttributeDescriptor getRootAsSimpleAttributeDescriptor(ByteBuffer _bb) { return getRootAsSimpleAttributeDescriptor(_bb, new SimpleAttributeDescriptor()); }
  public static SimpleAttributeDescriptor getRootAsSimpleAttributeDescriptor(ByteBuffer _bb, SimpleAttributeDescriptor obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public SimpleAttributeDescriptor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public QualifiedName name() { return name(new QualifiedName()); }
  public QualifiedName name(QualifiedName obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public AttributeType type() { return type(new AttributeType()); }
  public AttributeType type(AttributeType obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int minOccurs() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int maxOccurs() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean nillable() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createSimpleAttributeDescriptor(FlatBufferBuilder builder,
      int nameOffset,
      int typeOffset,
      int min_occurs,
      int max_occurs,
      boolean nillable) {
    builder.startObject(5);
    SimpleAttributeDescriptor.addMaxOccurs(builder, max_occurs);
    SimpleAttributeDescriptor.addMinOccurs(builder, min_occurs);
    SimpleAttributeDescriptor.addType(builder, typeOffset);
    SimpleAttributeDescriptor.addName(builder, nameOffset);
    SimpleAttributeDescriptor.addNillable(builder, nillable);
    return SimpleAttributeDescriptor.endSimpleAttributeDescriptor(builder);
  }

  public static void startSimpleAttributeDescriptor(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(1, typeOffset, 0); }
  public static void addMinOccurs(FlatBufferBuilder builder, int minOccurs) { builder.addInt(2, minOccurs, 0); }
  public static void addMaxOccurs(FlatBufferBuilder builder, int maxOccurs) { builder.addInt(3, maxOccurs, 0); }
  public static void addNillable(FlatBufferBuilder builder, boolean nillable) { builder.addBoolean(4, nillable, false); }
  public static int endSimpleAttributeDescriptor(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // name
    return o;
  }
}


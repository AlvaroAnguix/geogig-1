// automatically generated by the FlatBuffers compiler, do not modify

package org.locationtech.geogig.flatbuffers.generated.values;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class BIG_DECIMAL extends Table {
  public static BIG_DECIMAL getRootAsBIG_DECIMAL(ByteBuffer _bb) { return getRootAsBIG_DECIMAL(_bb, new BIG_DECIMAL()); }
  public static BIG_DECIMAL getRootAsBIG_DECIMAL(ByteBuffer _bb, BIG_DECIMAL obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public BIG_DECIMAL __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int scale() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int value(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int valueLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer valueAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer valueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createBIG_DECIMAL(FlatBufferBuilder builder,
      int scale,
      int valueOffset) {
    builder.startObject(2);
    BIG_DECIMAL.addValue(builder, valueOffset);
    BIG_DECIMAL.addScale(builder, scale);
    return BIG_DECIMAL.endBIG_DECIMAL(builder);
  }

  public static void startBIG_DECIMAL(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addScale(FlatBufferBuilder builder, int scale) { builder.addInt(0, scale, 0); }
  public static void addValue(FlatBufferBuilder builder, int valueOffset) { builder.addOffset(1, valueOffset, 0); }
  public static int createValueVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startValueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endBIG_DECIMAL(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

